<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Ethan Estrada: Ethan Estrada</title>
  <description>Ethan Estrada: Ethan Estrada</description>
  <link>http://www.misterfidget.com/blog/index.html</link>
  <lastBuildDate>Sun, 11 Sep 2016 05:11:20 UT</lastBuildDate>
  <pubDate>Sun, 11 Sep 2016 05:11:20 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>On Syntax and Macros</title>
   <link>http://www.misterfidget.com/blog/2016/09/10/on-syntax-and-macros.html?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-misterfidget-com:-blog-2016-09-10-on-syntax-and-macros-html</guid>
   <pubDate>Sun, 11 Sep 2016 05:11:20 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;From what I have read, it seems that most people have an ultimate Zen moment with Lisp that makes the universe seem to fall into order (or, &lt;a href="http://www.catb.org/~esr/faqs/hacker-howto.html#skills1"&gt;so says Eric S. Raymond&lt;/a&gt;). My journey with Lisp so far hasn&amp;rsquo;t been like that. Instead, it has been a number of smaller &amp;ldquo;Aha!&amp;rdquo; moments. In fact, I just had one today. Maybe my big Zen moment will come later. I guess I&amp;rsquo;ll just need to keep learning and see where the Lisp journey takes me.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Getting back to the &amp;ldquo;Aha!&amp;rdquo; moment, I was reading &lt;a href="http://all-things-andy-gavin.com/2011/03/12/making-crash-bandicoot-gool-part-9/"&gt;an article by Andrew Gavin about how he used Lisp in creating games for Naughty Dog&lt;/a&gt;. In the article he says that "&amp;hellip;C provides series of convenient macros for flow control, arithmetic operations, memory reference, function calling, and structure access." My first reaction was &amp;ldquo;No, Andy. You&amp;rsquo;ve got it all wrong. Those aren&amp;rsquo;t macros, they are part of the syntax&amp;hellip;&amp;rdquo;&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;Syntax, in any language, is just a bunch of macros you didn&amp;rsquo;t need to write.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Then I paused, thought for a minute, and made a realization: if macros are syntax, is the inverse also true? Is syntax just macros? Yes, yes it is. Syntax, in any language, is just a bunch of macros you didn&amp;rsquo;t need to write. Why? Because all languages are later compiled to something else.&lt;/p&gt;

&lt;p&gt;Compilation is a fancy way of saying you transform one language into another, much like macros transform one piece of syntax into another piece of syntax. Not &lt;em&gt;much&lt;/em&gt; like; it&amp;rsquo;s &lt;strong&gt;&lt;em&gt;exactly&lt;/em&gt;&lt;/strong&gt; like that. Transforming Lisp to Lisp is not all that different from transforming C to assembly, or Python to bytecode. That is what Andrew ultimately does with his custom Lisp dialect, GOOL: compile Lisp into R3000 assembly code.&lt;/p&gt;

&lt;p&gt;So, thanks Andy. Your twenty year old article taught me something fundemental about Lisp and computer science. And the Lisp journey continues.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>SIGGRAPH 2016 Post Mortem</title>
   <link>http://www.misterfidget.com/blog/2016/07/29/siggraph-2016-post-mortem.html?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-misterfidget-com:-blog-2016-07-29-siggraph-2016-post-mortem-html</guid>
   <pubDate>Fri, 29 Jul 2016 20:52:18 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I had the opportunity to attend SIGGRAPH this year as a representative of &lt;a href="http://metapipe.com"&gt;MetaPipe&lt;/a&gt;. For as fun as it was to meet with representatives of various software and cloud companies, I am happy to be able to get my nose back to the grindstone on MetaPipe. I&amp;rsquo;m extremely excited about the tech we are working on for the service and I can&amp;rsquo;t wait to get it to the point where we can start demoing it publicly to get everyone&amp;rsquo;s feedback. We started a lot of converstaions at SIGGRAPH with various companies that we feel fairly confident will turn into more concrete agreements in the near future.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;I got an &amp;ldquo;Exhibits Only&amp;rdquo; pass during the convention; we are trying to be as scrappy, lean, and frugal as we can be so splurging on something like a &amp;ldquo;Full Conference&amp;rdquo; pass would definitly be overkill especially when Avere provided us with a code for a free &amp;ldquo;Exhibits Only&amp;rdquo; pass. Besides, all of the people we wanted to talk to were on the exhibit floor anyway. Maybe in future years we will get more complete passes to check out presentations to see the state of the industry, but for now we are keeping it simple. Ideally we will be able to justify having our own booth next year!&lt;/p&gt;

&lt;p&gt;Even though I&amp;rsquo;ve heard SIGGRAPH has shrunk in attendence some in recent years, it is still very impressive in size and scope. I think this in part is from the decreased focus on the job fair and a greater focus on interconnect between vendors. SIGGRAPH seems less useful for individual artists looking for work than it used to be.&lt;/p&gt;

&lt;p&gt;The biggest focus at the convention seemed to be VR and AR. Pretty much every booth from software vendors featured VR workflows. The new VR camera from Houdini, CaraVR addon for Nuke from The Foundry, the (not yet publicly available) VR toolset for Mocha from Imagineer systems, and more from other companies as well.&lt;/p&gt;

&lt;p&gt;Not surprisingly, cloud was also a big focus (which was a big attraction to us). Many softwares packages such as deadline from Thinkbox software and Tractor from Pixar are starting to have more and more cloud based features, such as extremely granular billing for various software packages (from Thinkbox) and intelligent autoscaling features (from Tractor, and if I remember correctly, Thinkbox was working on similar stuff as well).&lt;/p&gt;

&lt;p&gt;Autoscaling is an interesting problem in and of itself; scale too quickly and users will rack up charges for compute they didn&amp;rsquo;t really use efficiently. Scale too slowly and what should only take a few minutes could end up taking hours. Some workloads are heavy per frame and some are light. When do you scale up? How automagical can you make it for the user so that they have fewer knobs to deal with? Can you base it off of the basic priority parameter that most render schedulers already have, or do you need a different mechanism for it? Perhaps something like the expected average render time per frame (or task)? What about distributed simulations that are parallel, but need to be in lockstep? They should probably all spin up at the same time, but how do you signal this to the scheduler in a relatively turnkey way?&lt;/p&gt;

&lt;p&gt;During the convention, I either asked these questions to the various developers on the farm manager teams, or thought of them after the fact due to mulling over the questions I had asked or information I had learned. It isn&amp;rsquo;t an easy problem to solve and one that I am sure will have many more years of time and effort poured into it before well rounded solutions come to market.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Moving blogs</title>
   <link>http://www.misterfidget.com/blog/2016/07/29/moving-blogs.html?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-misterfidget-com:-blog-2016-07-29-moving-blogs-html</guid>
   <pubDate>Fri, 29 Jul 2016 15:52:18 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I am moving blogging platforms and thought I should maybe explain why.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;In the past I have been hosting my blog on Google&amp;rsquo;s Blogger platform. This has served me pretty well over the years along with the limited number of posts I have made. However, as I have tried to expand the blog into more of a general website, it has been an uphill battle fighting against the workflow of the blogging system itself. I don&amp;rsquo;t forsee wordpress being much different.&lt;/p&gt;

&lt;p&gt;Besides, one of my reasons for moving to my current setup was simplicity and control. I am using a static site generator now (ala Jekyll). The reasons for this being that:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;I now directly control my own content&lt;/li&gt;
 &lt;li&gt;I don&amp;rsquo;t need to set up a wordpress server or anything of the sort&lt;/li&gt;
 &lt;li&gt;There should never be downtime since the site is statically hosted  on Github or S3 or whereever&lt;/li&gt;
 &lt;li&gt;Inline with number 1, I can version control my content (with  something simple like git)&lt;/li&gt;
 &lt;li&gt;I can write my posts in MarkDown&lt;/li&gt;
 &lt;li&gt;I can embed source code styling instead of reaching out to  JavaScript libraries to do it dynamically at run time&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;I like all these reasons. It also means I can theme the site however I like using simple HTML templates. I can also add whatever types of pages I want since in the end it is just static HTML.&lt;/p&gt;

&lt;p&gt;Really, there are lots of reasons to use a static site generator. I am currently using &lt;a href="https://github.com/greghendershott/frog"&gt;frog&lt;/a&gt;, the &lt;strong&gt;fr&lt;/strong&gt;ozen bl&lt;strong&gt;og&lt;/strong&gt; generator, written in a somewhat lesser known language called Racket (a dialect of Lisp descended from Scheme). I like the Lisp in general and Racket in specific. I want to support its increased usage and the best way to do that is to use projects that use it.&lt;/p&gt;

&lt;p&gt;I plan to port over my old blog posts once I get a chance, although that may prove to be a bit of a chore. I&amp;rsquo;ll probably end up avoiding it for a super long time.&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>