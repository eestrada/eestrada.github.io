<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CGI on Ethan Estrada</title>
    <link>https://www.misterfidget.com/tags/cgi/</link>
    <description>Recent content in CGI on Ethan Estrada</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Sep 2016 23:11:20 -0700</lastBuildDate>
    <atom:link href="https://www.misterfidget.com/tags/cgi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On Syntax and Macros</title>
      <link>https://www.misterfidget.com/posts/on-syntax-and-macros/</link>
      <pubDate>Sat, 10 Sep 2016 23:11:20 -0700</pubDate>
      <guid>https://www.misterfidget.com/posts/on-syntax-and-macros/</guid>
      <description>&lt;p&gt;From what I have read, it seems that most people have an ultimate Zen&#xA;moment with Lisp that makes the universe seem to fall into order (or,&#xA;&lt;a href=&#34;http://www.catb.org/~esr/faqs/hacker-howto.html#skills1&#34;&gt;so says Eric S. Raymond&lt;/a&gt;). My&#xA;journey with Lisp so far hasn&amp;rsquo;t been like that. Instead, it has been a&#xA;number of smaller &amp;ldquo;Aha!&amp;rdquo; moments. In fact, I just had one today. Maybe&#xA;my big Zen moment will come later. I guess I&amp;rsquo;ll just need to keep&#xA;learning and see where the Lisp journey takes me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SIGGRAPH 2016 Post Mortem</title>
      <link>https://www.misterfidget.com/posts/siggraph-2016-post-mortem/</link>
      <pubDate>Fri, 29 Jul 2016 14:52:18 -0700</pubDate>
      <guid>https://www.misterfidget.com/posts/siggraph-2016-post-mortem/</guid>
      <description>&lt;p&gt;I had the opportunity to attend SIGGRAPH this year as a representative&#xA;of &lt;a href=&#34;http://metapipe.com&#34;&gt;MetaPipe&lt;/a&gt;. For as fun as it was to meet with&#xA;representatives of various software and cloud companies, I am happy to&#xA;be able to get my nose back to the grindstone on MetaPipe. I&amp;rsquo;m&#xA;extremely excited about the tech we are working on for the service and&#xA;I can&amp;rsquo;t wait to get it to the point where we can start demoing it&#xA;publicly to get everyone&amp;rsquo;s feedback. We started a lot of converstaions&#xA;at SIGGRAPH with various companies that we feel fairly confident will&#xA;turn into more concrete agreements in the near future.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python wrapper for hscript</title>
      <link>https://www.misterfidget.com/posts/python-wrapper-for-hscript/</link>
      <pubDate>Wed, 30 Sep 2015 02:18:00 -0600</pubDate>
      <guid>https://www.misterfidget.com/posts/python-wrapper-for-hscript/</guid>
      <description>&lt;p&gt;Houdini has a nice little function in Python in the &lt;code&gt;hou&lt;/code&gt; namespace called &lt;code&gt;hscript&lt;/code&gt;.&#xA;You can pass in a string for an hscript command.&#xA;It passes back out a tuple with stdout and stderr strings.&#xA;This is dandy,&#xA;but it would be nice to call hscript commands with (in essence) Python syntax.&#xA;So I made a little class that does just that.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HscriptWrapper&lt;/span&gt;(object):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    commands &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hou&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hscript(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    commands &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; frozenset(commands&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__getattr__&lt;/span&gt;(self, attr):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; attr &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commands:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AttributeError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No hscript command by name &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; attr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# cache for future calls&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__dict__[attr] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rattr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;_command_factory(attr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; rattr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_command_factory&lt;/span&gt;(self, attr):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmd&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            fmt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{cmd}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{flags}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{args}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            hsargs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(args)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            hsflags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k, v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; kwargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;items():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isinstance(v, bool) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    hsflags&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    hsflags&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{1}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(k, v))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            hsflags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(hsflags)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            hscmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(cmd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;attr, flags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hsflags, args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hsargs)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; hou&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hscript(hscmd)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cmd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; attr&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cmd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__doc__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hou&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hscript(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(attr))[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cmd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To use it, create an instance of the HscriptWrapper class,&#xA;then access hscript commands as attributes of the instance.&#xA;The returned attribute is a callable function that takes positional and keyword arguments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Houdini Rigging</title>
      <link>https://www.misterfidget.com/posts/houdini-rigging/</link>
      <pubDate>Thu, 14 Feb 2013 16:32:00 -0700</pubDate>
      <guid>https://www.misterfidget.com/posts/houdini-rigging/</guid>
      <description>&lt;p&gt;I am generally pretty sad with the number of free tutorials about Houdini rigging.&#xA;Thus, I have started a &lt;a href=&#34;//www.youtube.com/playlist?list=PLDOYfdOqIB1CFANGg0wOQaZFus67NS4rV&#34;&gt;series of them on youtube&lt;/a&gt;.&#xA;They aren&amp;rsquo;t polished or even really planned out before hand.&#xA;Really, they are little more than just stream of consciousness,&#xA;but they have &lt;em&gt;&lt;strong&gt;information&lt;/strong&gt;&lt;/em&gt;, which is the important part.&#xA;If you are interested in certain topics relating to Houdini rigging,&#xA;post a comment and let me know what you want me to cover next.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interesting video and an explanation of CG animation</title>
      <link>https://www.misterfidget.com/posts/interesting-video-and-explanation-of-cg/</link>
      <pubDate>Thu, 02 Sep 2010 06:27:00 -0600</pubDate>
      <guid>https://www.misterfidget.com/posts/interesting-video-and-explanation-of-cg/</guid>
      <description>&lt;p&gt;Hi y&amp;rsquo;all.&#xA;I found this video (UPDATE: previously linked video was an old flash player embed&#xA;and no longer exists)&#xA;and it got me to thinking about special effects and how we perceive them.&#xA;Even though everyone in the studio audience had undoubtedly seen blockbuster films with eye fooling special effects,&#xA;they went wild for this performance of a rather simple concept.&#xA;Don&amp;rsquo;t misunderstand me;&#xA;what they are doing is extremely difficult.&#xA;However,&#xA;something is often more impressive to us when we can understand the effort put into it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
